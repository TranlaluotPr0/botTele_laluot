import aiohttp
import asyncio
from telegram import Update
from telegram.ext import ContextTypes

API_URL = "https://freefirev1.vercel.app/like"
API_KEY = "FreeKey"  # Key c·ªë ƒë·ªãnh

# L·ªánh /likes <uid>
async def likes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è D√πng l·ªánh: /likes <uid>")
        return

    uid = context.args[0]

    params = {
        "uid": uid,
        "key": API_KEY
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, params=params, timeout=10) as resp:
                if resp.status != 200:
                    text = await resp.text()
                    await update.message.reply_text(f"‚ùå API tr·∫£ v·ªÅ HTTP {resp.status}\nüì¶ N·ªôi dung: {text}")
                    return

                try:
                    data = await resp.json()
                except Exception:
                    text = await resp.text()
                    await update.message.reply_text(f"üì¶ Raw response:\n{text}")
                    return

        # V√¨ response l√† 1 list JSON, l·∫•y ph·∫ßn t·ª≠ th·ª© 2 (th√¥ng tin like)
        if len(data) < 2:
            await update.message.reply_text(f"‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá:\n{data}")
            return

        info = data[1]  # ph·∫ßn t·ª≠ th·ª© 2 ch·ª©a th√¥ng tin like
        key_info = data[0]  # ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n ch·ª©a th√¥ng tin key

        # L·∫•y d·ªØ li·ªáu
        likes_before = info.get("Likes Before Command", "‚ùì")
        likes_after = info.get("Likes after", "‚ùì")
        likes_added = info.get("Likes Added", "‚ùì")
        nickname = info.get("Player Name", "Kh√¥ng r√µ")
        uid_resp = info.get("Player UID", uid)
        status = info.get("Status", "‚ùå")

        reply = (
            f"‚ú® *K·∫øt qu·∫£ Like (API V1)*\n\n"
            f"üë§ Nickname: `{nickname}`\n"
            f"üÜî UID: `{uid_resp}`\n\n"
            f"üëç Likes Tr∆∞·ªõc: {likes_before}\n"
            f"‚ûï Likes ƒê∆∞·ª£c C·ªông: {likes_added}\n"
            f"‚ú® Likes Sau: {likes_after}\n\n"
            f"üìå Tr·∫°ng th√°i: {status}\n\n"
            f"üîë Key Expire: {key_info.get('key expire', '‚ùì')}\n"
            f"‚è≥ Remaining Limit: {key_info.get('remaining limit', '‚ùì')}\n"
            f"‚úÖ Verify: {key_info.get('verify', '‚ùì')}\n\n"
            f"üôè C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Bot c·ªßa DatTranDev"
        )

        await update.message.reply_text(reply, parse_mode="Markdown")

    except asyncio.TimeoutError:
        await update.message.reply_text("‚è∞ API ph·∫£n h·ªìi qu√° l√¢u.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {e}")
