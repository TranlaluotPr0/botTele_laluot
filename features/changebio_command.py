# features/changebio_command.py
import aiohttp
import asyncio
from aiohttp import ClientConnectorError
from telegram import Update
from telegram.ext import ContextTypes

API_URL = "https://black-change-bio.vercel.app/get"

async def changebio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Ki·ªÉm tra tham s·ªë
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è D√πng l·ªánh:\n`/changebio <jwt_token> <new_bio>`\n\nüëâ D√πng `\\n` ƒë·ªÉ xu·ªëng d√≤ng.",
            parse_mode="Markdown"
        )
        return
    
    jwt_token = context.args[0]
    bio_text = " ".join(context.args[1:]).strip()
    bio_text = bio_text.replace("\\n", "\n")  # H·ªó tr·ª£ xu·ªëng d√≤ng

    if not bio_text:
        await update.message.reply_text("‚ö†Ô∏è Bio tr·ªëng, nh·∫≠p l·∫°i cho chu·∫©n nha.")
        return

    params = {"access": jwt_token, "text": bio_text}

    try:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(API_URL, params=params, timeout=10) as resp:
                    content_type = resp.headers.get("Content-Type", "")
                    
                    # N·∫øu tr·∫£ JSON
                    if "application/json" in content_type.lower():
                        data = await resp.json(content_type=None)
                        status_api = data.get("status") or data.get("Status api", "")
                        msg = data.get("message") or data.get("msg") or ""

                        if status_api.lower() == "error" or resp.status != 200:
                            response_text = (
                                "‚ùå Thay ƒë·ªïi ti·ªÉu s·ª≠ th·∫•t b·∫°i!\n"
                                f"L√Ω do: {msg or 'Kh√¥ng r√µ'}"
                            )
                        else:
                            response_text = (
                                "‚úÖ Ti·ªÉu s·ª≠ ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!\n\n"
                                f"üìù Ti·ªÉu s·ª≠ m·ªõi:\n{bio_text}\n\n"
                                "C·∫£m ∆°n b·∫°n ƒë√£ d√πng bot c·ªßa TranDatDev"
                            )
                    
                    # N·∫øu tr·∫£ v·ªÅ plain text
                    else:
                        raw_text = await resp.text()
                        if resp.status != 200 or "error" in raw_text.lower():
                            response_text = (
                                "‚ùå Thay ƒë·ªïi ti·ªÉu s·ª≠ th·∫•t b·∫°i!\n"
                                f"L√Ω do t·ª´ API: {raw_text.strip()}"
                            )
                        else:
                            response_text = (
                                f"{raw_text.strip()}\n\n"
                                "C·∫£m ∆°n b·∫°n ƒë√£ d√πng bot c·ªßa TranDatDev"
                            )

                    await update.message.reply_text(response_text)

            except ClientConnectorError:
                await update.message.reply_text("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API.")
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è∞ API ph·∫£n h·ªìi qu√° l√¢u.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")
