# features/changebio_command.py
import aiohttp
import asyncio
import json
from aiohttp import ClientConnectorError
from telegram import Update
from telegram.ext import ContextTypes

API_URL = "https://black-change-bio.vercel.app/get"  # HTTPS, kh√¥ng c·∫ßn ssl=False

async def changebio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # /changebio <JWT> <bio m·ªõi...>
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå D√πng: /changebio <JWT> <bio_m·ªõi>\n"
                "V√≠ d·ª•:\n"
                "   /changebio eyJhbGciOi... Hello anh em üöÄ"
            )
            return

        jwt_token = context.args[0]
        bio_text = " ".join(context.args[1:]).strip()
        if not bio_text:
            await update.message.reply_text("‚ö†Ô∏è Bio tr·ªëng r·ªìi b·∫°n ∆°i.")
            return

        params = {
            "access": jwt_token,
            "text": bio_text
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(API_URL, params=params, timeout=10) as resp:
                    if resp.status != 200:
                        await update.message.reply_text(f"‚ùå API tr·∫£ v·ªÅ HTTP {resp.status}")
                        return

                    # ∆∞u ti√™n parse JSON; n·∫øu kh√¥ng, tr·∫£ raw text
                    content_type = resp.headers.get("Content-Type", "")
                    if "application/json" in content_type.lower():
                        data = await resp.json(content_type=None)
                    else:
                        text = await resp.text()
                        data = {"raw": text}
            except ClientConnectorError:
                await update.message.reply_text("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API (server offline ho·∫∑c ch·∫∑n IP).")
                return
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è∞ API ph·∫£n h·ªìi qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i sau!")
                return

        # Format k·∫øt qu·∫£ (·∫©n DEV/channel n·∫øu c√≥; ch·ªâ show th√¥ng tin h·ªØu √≠ch)
        if isinstance(data, dict):
            # v√†i kh√≥a th∆∞·ªùng g·∫∑p: status/success/msg
            ok = bool(data.get("ok") or data.get("success") or data.get("status") in [1, "ok", True])
            msg = data.get("message") or data.get("msg")

            if ok or msg:
                await update.message.reply_text(
                    f"‚úÖ ƒê·ªïi bio th√†nh c√¥ng!\n\n"
                    f"üìù Bio m·ªõi: {bio_text}\n"
                    f"{'‚ÑπÔ∏è ' + msg if msg else ''}"
                )
            else:
                # fallback: in g·ªçn JSON ƒë·ªÉ b·∫°n xem server tr·∫£ g√¨
                # ƒë·ªìng th·ªùi b·ªè DEV/channel n·∫øu xu·∫•t hi·ªán
                data.pop("DEV", None)
                data.pop("channel", None)
                await update.message.reply_text("üì¶ Response:\n" + json.dumps(data, ensure_ascii=False, indent=2))
        else:
            await update.message.reply_text(f"üì¶ Response:\n{data}")

    except Exception:
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!")
