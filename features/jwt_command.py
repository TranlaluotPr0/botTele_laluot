# features/jwt_command.py
import aiohttp
import asyncio
from aiohttp import ClientConnectorError
from telegram import Update
from telegram.ext import ContextTypes

API_URL = "https://ff-community-api.vercel.app/oauth/guest:token"

async def jwt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Ki·ªÉm tra tham s·ªë
    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è D√πng l·ªánh:\n`/jwt <data>`\n\n"
            "üëâ V√≠ d·ª•:\n`/jwt 4193715627:2038FBA3D5FC73D5E72AFE32BA8FAB10B214533AD091DB5A9349B7BA089D569E`",
            parse_mode="Markdown"
        )
        return

    data_param = context.args[0]

    params = {"data": data_param}

    try:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(API_URL, params=params, timeout=10) as resp:
                    content_type = resp.headers.get("Content-Type", "")

                    # N·∫øu tr·∫£ JSON
                    if "application/json" in content_type.lower():
                        data = await resp.json(content_type=None)
                        jwt_token = data.get("token") or data.get("jwt") or ""
                        msg = data.get("message") or data.get("msg") or ""

                        if not jwt_token:
                            response_text = (
                                "‚ùå L·∫•y token th·∫•t b·∫°i!\n"
                                f"L√Ω do: {msg or 'Kh√¥ng r√µ'}"
                            )
                        else:
                            response_text = (
                                "‚úÖ L·∫•y token th√†nh c√¥ng!\n\n"
                                f"üîë JWT Token:\n`{jwt_token}`\n\n"
                                "C·∫£m ∆°n b·∫°n ƒë√£ d√πng bot c·ªßa TranDatDev"
                            )

                    # N·∫øu tr·∫£ v·ªÅ plain text
                    else:
                        raw_text = await resp.text()
                        if resp.status != 200 or "error" in raw_text.lower():
                            response_text = (
                                "‚ùå L·∫•y token th·∫•t b·∫°i!\n"
                                f"L√Ω do t·ª´ API: {raw_text.strip()}"
                            )
                        else:
                            response_text = (
                                f"‚úÖ Token nh·∫≠n ƒë∆∞·ª£c:\n`{raw_text.strip()}`\n\n"
                                "C·∫£m ∆°n b·∫°n ƒë√£ d√πng bot c·ªßa TranDatDev"
                            )

                    await update.message.reply_text(response_text, parse_mode="Markdown")

            except ClientConnectorError:
                await update.message.reply_text("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API.")
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è∞ API ph·∫£n h·ªìi qu√° l√¢u.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")
