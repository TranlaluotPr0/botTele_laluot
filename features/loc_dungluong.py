# features/loc_dungluong.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# Danh s√°ch user ƒëang ch·ªù nh·∫≠p kho·∫£ng dung l∆∞·ª£ng
waiting_dungluong = set()

def get_waiting_set():
    return waiting_dungluong

def set_received_files(data):
    global received_files
    received_files = data

# Khi ng∆∞·ªùi d√πng b·∫•m menu l·ªçc dung l∆∞·ª£ng
async def loc_dungluong_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    waiting_dungluong.add(query.from_user.id)
    await query.message.reply_text("‚úçÔ∏è Nh·∫≠p kho·∫£ng dung l∆∞·ª£ng c·∫ßn l·ªçc (MB), v√≠ d·ª•: 0.5 5")

# Khi ng∆∞·ªùi d√πng nh·∫≠p kho·∫£ng dung l∆∞·ª£ng
async def handle_dungluong_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id in waiting_dungluong:
        try:
            min_mb, max_mb = map(float, text.split())
            matched = [
                f"üìÑ {f['name']} ‚Äî {round(f['size'] / 1024 / 1024, 2)} MB"
                for f in received_files
                if min_mb <= f['size'] / (1024 * 1024) <= max_mb
            ]
            if matched:
                await update.message.reply_text("\n".join(matched))
            else:
                await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong kho·∫£ng dung l∆∞·ª£ng.")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è Sai ƒë·ªãnh d·∫°ng. Nh·∫≠p ƒë√∫ng nh∆∞: 0.5 5")
        waiting_dungluong.discard(user_id)
